<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="template.xsl"?>
<documentation>
  <feature type="method" object_type="*;sut" required_plugin="tdriver-sut-qt-plugin" sut_type="qt" sut_version="*" name="flick" input_type="touch">
    <behaviour module="MobyBehaviour::QT::Gesture" name="QtExampleGestureBehaviour"/>
    <description>Cause a flick operation on the screen.</description>
    <info>See method [link="#X"]X[/link], table at [link="#Y"]Y[/link]</info>
    <arguments block="false" count="3" optional="2" described="3">
      <argument type="normal" optional="false" name="direction" default="">
        <type name="Integer">
          <description>Example argument1</description>
          <example>10</example>
        </type>
      </argument>
      <argument type="normal" optional="true" name="button" default=":Left">
        <type name="String">
          <description>which button to use</description>
          <example>"Hello"</example>
        </type>
      </argument>
      <argument type="normal" optional="true" name="optional_params" default="{}">
        <type name="String">
          <description>optinal parameters for blaa blaa blaa</description>
          <example>{:a =&gt; 1, :b =&gt; 2}</example>
        </type>
      </argument>
    </arguments>
    <returns described="1">
      <type name="String">
        <description>Return value type</description>
        <example>"World"</example>
      </type>
    </returns>
    <exceptions described="2">
      <type name="RuntimeError">
        <description>example exception</description>
      </type>
      <type name="ArgumentError">
        <description>example exception</description>
      </type>
    </exceptions>
    <tests count="1" passed="0" skipped="0" failed="0"/>
  </feature>
  <feature type="method" object_type="*;sut" required_plugin="tdriver-sut-qt-plugin" sut_type="qt" sut_version="*" name="group_behaviours" input_type="touch">
    <behaviour module="MobyBehaviour::QT::Gesture" name="QtExampleGestureBehaviour"/>
    <description>Groups [b]behaviours [u]into a single[/u] message.[/b] Commands are executed in the target in sequence using the given interval as timeout between the commands.\nThe interval is not quaranteed to be exactly the specified amount and will vary depending on the load in the target device.
Therefore it is not recommended to use the interval as basis for the test results.\n\n[name="custom_section"][b]custom_section[/b][/name]\nThe commands are all executed in the target device in a single
roundtrip from MATTI to the target device so no verification will or can be done between the commands so do not group behaviours which change the ui
in a way that the next command may fail. Best use cases for the grouping is static behaviours such as virtual keyboard button taps.
Behaviours can only be qrouped for one application at a time and you need to provide the application object as parameter.
Sut behaviours [i][b]cannot be grouped[/b][/i].\n\n[:this_is_not_a_tag]\n\n[img="pic.png"]image title[/img]\n\nbtw MATTI is now TDriver, see [link="http://www.gitorious.org/tdriver"]gitorious.org[/link]\n\nSee table [link="#custom"]custom table[/link]</description>
    <info></info>
    <tables>
      <table name="custom" title="Custom table">
        <header>
          <item>ID</item>
          <item>Value</item>
          <item>Description</item>
        </header>
        <row>
          <item>[i]1.1[/i]</item>
          <item>[b]1.2[/b]</item>
          <item>[u]1.3[/u], see [link="#custom_section"]custom section[/link]</item>
        </row>
        <row>
          <item>2.1</item>
          <item>2.2</item>
          <item>2.3</item>
        </row>
        <row>
          <item>3.1</item>
          <item>3.2</item>
          <item>3.3</item>
        </row>
      </table>
    </tables>
    <arguments block="true" count="3" optional="1" described="3">
      <argument type="normal" optional="false" name="interval" default="">
        <type name="Integer">
          <description>Inteval time in seconds (0.1 is an acceptable value)</description>
          <example>1</example>
        </type>
      </argument>
      <argument type="normal" optional="false" name="app" default="">
        <type name="TestObject">
          <description>The target application for the grouped behaviours</description>
          <example>@application</example>
        </type>
      </argument>
      <argument type="block" optional="false" name="block" default="">
        <type name="Proc">
          <description>Code block containing the behaviours to group as one.</description>
          <example>{ app.Object.tap; app.Object_two.tap }</example>
        </type>
      </argument>
    </arguments>
    <returns described="0">
    
      <type name="NilClass">
        <description></description>
        <example></example>
      </type>
    
    </returns>
    <exceptions described="1">
      <type name="ArgumentError">
        <description>If interval not a number or app nil</description>
      </type>
    </exceptions>
    <tests count="1" passed="0" skipped="0" failed="0"/>
  </feature>

  <feature type="reader" object_type="*;sut" required_plugin="tdriver-sut-qt-plugin" sut_type="qt" sut_version="*" name="reader" input_type="touch">
    <behaviour module="MobyBehaviour::QT::Gesture" name="QtExampleGestureBehaviour"/>
    <description>attribute_reader</description>
    <info></info>
    <arguments block="false" count="0" optional="0" described="0" />
    <returns described="1">
      <type name="String">
        <description>Return value type</description>
        <example>"World"</example>
      </type>
    </returns>
    <tests count="1" passed="0" skipped="0" failed="0"/>
  </feature>

  <feature type="writer" object_type="*;sut" required_plugin="tdriver-sut-qt-plugin" sut_type="qt" sut_version="*" name="writer" input_type="touch">
    <behaviour module="MobyBehaviour::QT::Gesture" name="QtExampleGestureBehaviour"/>
    <description>attribute_reader</description>
    <info></info>
    <arguments block="false" count="1" optional="0" described="1">
      <argument type="normal" optional="false" name="value" default="">
        <type name="Integer">
          <description>Input value</description>
          <example>10</example>
        </type>
      </argument>
    </arguments>
    <returns described="1">
      <type name="String">
        <description>Return value type</description>
        <example>"World"</example>
      </type>
    </returns>
    <tests count="1" passed="0" skipped="0" failed="0"/>
  </feature>

  <feature type="method" object_type="*;sut" required_plugin="tdriver-sut-qt-plugin" sut_type="qt" sut_version="*" name="method_no_args" input_type="touch">
    <behaviour module="MobyBehaviour::QT::Gesture" name="QtExampleGestureBehaviour"/>
    <description>Method with no required arguments</description>
    <info></info>
    <arguments block="false" count="0" optional="0" described="0" />
    <returns described="1">
      <type name="String">
        <description>Return value type</description>
        <example>"World"</example>
      </type>
    </returns>
    <tests count="1" passed="0" skipped="0" failed="0"/>
  </feature>

  <feature type="accessor" object_type="*;sut" required_plugin="tdriver-sut-qt-plugin" sut_type="qt" sut_version="*" name="accessor" input_type="touch">
    <behaviour module="MobyBehaviour::QT::Gesture" name="QtExampleGestureBehaviour"/>
    <description>attribute_reader</description>
    <info></info>
    <arguments block="false" count="1" optional="0" described="1">
      <argument type="normal" optional="false" name="value" default="">
        <type name="Integer">
          <description>Input value</description>
          <example>10</example>
        </type>
      </argument>
    </arguments>
    <returns described="1">
      <type name="String">
        <description>Return value type</description>
        <example>"World"</example>
      </type>
    </returns>
    <tests count="1" passed="0" skipped="0" failed="0">
      <scenario status="passed">
        <description>Basic scenario, should pass</description>
        <example>10</example>        
      </scenario>
      <scenario status="skipped">
        <description>Another scenario</description>
        <example>10</example>        
      </scenario>

    </tests>
  </feature>

</documentation>
